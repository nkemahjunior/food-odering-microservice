spring:
  config:
    import: optional:configserver:http://localhost:8888

  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8084/auth/realms/zeco-eats-realm
          jwk-set-uri: http://localhost:8084/auth/realms/zeco-eats-realm/protocol/openid-connect/certs

  cloud:
    gateway:
      redis-route-definition-repository: #redis location is already configured in application.yml( config server)
        enabled: true
      globalcors:
        add-to-simple-url-handler-mapping: true
        cors-configurations:
          '[/api/**]': #keycloak will handle its cors
            allowCredentials: true
            allowedOrigins: "http://localhost:3000"
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
            allowedHeaders: '*'
            maxAge: 1800 #clients should cache the response from a preflight request for 30 mins

      default-filters:
        - SecureHeaders
        #- TokenRelay
        - name: Retry
          args:
            retries: 3
            statuses: INTERNAL_SERVER_ERROR, BAD_GATEWAY
            #methods: GET, POST
            backoff:
              firstBackoff: 10ms
              maxBackoff: 50ms
              factor: 2
              basedOnPreviousValue: false
        - name: RequestRateLimiter #rate limiter
          args:
            redis-rate-limiter:
              key-resolver: "#{@customKeyResolver}"
              replenishRate: 50 # Allow up to 10 requests/sec per user
              burstCapacity: 70 # Allow bursts up to 20 tokens
              requestedTokens: 1 # use 1 token per request
              deny-empty-key: false #use true in prod

      routes:
        # Config Server Route
        - id: config-server
          uri: http://localhost:8888
          predicates:
            - Path=/api/configServer/**
          filters:
            - SecureHeaders

        # keycloak Route
        - id: keycloak
          uri: http://localhost:8079
          predicates:
            - Path=/auth/**
          filters:
           - SetRequestHeader=X-Forwarded-Proto, http
           - SetRequestHeader=X-Forwarded-Host, localhost
           - SetRequestHeader=X-Forwarded-Port, 8084
#           - MapRequestHeader=X-Forwarded-For, X-Forwarded-For
#           - MapRequestHeader=authorization, authorization
           - name: SecureHeaders
             args:
#                strict-transport-security: ""
                frame-options: "SAMEORIGIN"
                content-security-policy: "default-src 'self' 'unsafe-inline' 'unsafe-eval'; frame-ancestors 'self'"

        # Deliveries Service Route
        - id: deliveries-service
          uri: http://localhost:8083
          predicates:
            - Path=/api/deliveries/**, /_p/api/deliveries/**, /socket/deliveries/info, /socket/deliveries/info/** #for sockjs http
          filters:
            - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin #remove duplicates

        # Deliveries Service websocket Route
        - id: deliveries-service
          uri: ws://localhost:8083
          predicates:
            - Path=/socket/deliveries/**
          filters:
            - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin #remove duplicates

        # Restaurants Service Route
        - id: restaurants-service
          uri: http://localhost:8081
          predicates:
            - Path=/api/restaurants/**, /_p/api/restaurants/**

        # Users Service Route
        - id: users-service
          uri: http://localhost:8082
          predicates:
            - Path=/api/users/**, /_p/api/users/**

management:
  endpoints:
    web:
      exposure:
        include: "*"
      base-path: /api/apiGateway/actuator
  endpoint:
    health:
      show-details: always
  metrics:
    tags:
      service: api-gateway
